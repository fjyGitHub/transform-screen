{"version":3,"sources":["resize.js","App.js","serviceWorker.js","index.js"],"names":["MODE_LIST","value","text","SIZE_LIST","width","height","ratio","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","myRef","React","createRef","state","sizeIndex","modeIndex","e","setState","target","console","log","node","current","_this$state","size","mode","element","arguments","length","undefined","parentEl","parentElement","offsetWidth","offsetHeight","top","left","scaleX","scaleY","scale","Math","min","max","transform","concat","style","MozTransition","webkitTransition","transition","MozTransformOrigin","webkitTransformOrigin","transformOrigin","MozTransform","webkitTransform","transformScreen","_this$state2","react_default","a","createElement","className","ref","htmlFor","name","onChange","onSizeChange","bind","map","index","key","onModeChange","onResize","_this2","timer","window","addEventListener","clearTimeout","setTimeout","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72d2152d.chunk.js","sourcesContent":["const MODE_LIST = [\n  {\n    value: 'scaleToFill',\n    text: '不保持纵横比缩放容器，使容器的宽高完全拉伸至填满'\n  },\n  {\n    value: 'aspectFit',\n    text:\n      '保持纵横比缩放容器，使容器的长边能完全显示出来。也就是说，可以完整地将容器显示出来。'\n  },\n  {\n    value: 'aspectFill',\n    text: '保持纵横比缩放容器，只保证容器的短边能完全显示出来。'\n  },\n  {\n    value: 'widthFix',\n    text: '宽度不变，高度自动变化，保持原图宽高比不变\t'\n  },\n  {\n    value: 'heightFix',\n    text: '高度不变，宽度自动变化，保持原图宽高比不变\t'\n  }\n]\n\nfunction transformScreen(\n  element,\n  width = '1920',\n  height = '1080',\n  mode = 'aspectFit'\n) {\n  const parentEl = element.parentElement\n  const offsetWidth = parentEl.offsetWidth\n  const offsetHeight = parentEl.offsetHeight\n  let top = 0\n  let left = 0\n  let scaleX = offsetWidth / width\n  let scaleY = offsetHeight / height\n  if (mode === 'scaleToFill') {\n    // 默认，拉伸\n  } else {\n    // 等比缩放\n    let scale = 1\n    if (mode === 'aspectFit') {\n      scale = Math.min(scaleX, scaleY)\n    } else if (mode === 'aspectFill') {\n      scale = Math.max(scaleX, scaleY)\n    } else if (mode === 'widthFix') {\n      scale = scaleX\n    } else if (mode === 'heightFix') {\n      scale = scaleY\n    }\n    scaleX = scale\n    scaleY = scale\n    top = (offsetHeight - height * scale) / 2\n    left = (offsetWidth - width * scale) / 2\n  }\n\n  const transition = 'transform 0.2s'\n  const transformOrigin = 'left top'\n  const transform = `translate(${left}px, ${top}px) scale(${scaleX}, ${scaleY})`\n  element.style.width = `${width}px`\n  element.style.height = `${height}px`\n  element.style.MozTransition = transition\n  element.style.webkitTransition = transition\n  element.style.transition = transition\n  element.style.MozTransformOrigin = transformOrigin\n  element.style.webkitTransformOrigin = transformOrigin\n  element.style.transformOrigin = transformOrigin\n  element.style.MozTransform = transform\n  element.style.webkitTransform = transform\n  element.style.transform = transform\n}\n\nexport { MODE_LIST, transformScreen }\n","import React, { Component } from 'react'\nimport './App.css'\nimport { MODE_LIST, transformScreen } from './resize'\n\nconst SIZE_LIST = [\n  {\n    width: 1920,\n    height: 1080,\n    ratio: '16:9'\n  },\n  {\n    width: 1920,\n    height: 1200,\n    ratio: '16:10'\n  },\n  {\n    width: 1200,\n    height: 1200,\n    ratio: '1:1'\n  },\n  {\n    width: 1200,\n    height: 1920,\n    ratio: '9:16'\n  },\n  {\n    width: 1080,\n    height: 1920,\n    ratio: '10:16'\n  }\n]\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.myRef = React.createRef()\n    this.state = {\n      sizeIndex: 0,\n      modeIndex: 0\n    }\n  }\n  onSizeChange(e) {\n    this.setState({\n      sizeIndex: e.target.value\n    })\n  }\n  onModeChange(e) {\n    this.setState({\n      modeIndex: e.target.value\n    })\n  }\n  onResize() {\n    console.log('onResize')\n    const node = this.myRef.current\n    const { sizeIndex, modeIndex } = this.state\n    const size = SIZE_LIST[sizeIndex]\n    const mode = MODE_LIST[modeIndex]\n    transformScreen(node, size.width, size.height, mode.value)\n  }\n  render() {\n    const { sizeIndex, modeIndex } = this.state\n    return (\n      <div className=\"App\">\n        <main className=\"App-main\" ref={this.myRef}>\n          <div className=\"App-item\">top left</div>\n          <div className=\"App-item\">top center</div>\n          <div className=\"App-item\">top right</div>\n          <div className=\"App-item\">center left</div>\n          <div className=\"App-item\">center center</div>\n          <div className=\"App-item\">center right</div>\n          <div className=\"App-item\">bottom left</div>\n          <div className=\"App-item\">bottom center</div>\n          <div className=\"App-item\">bottom right</div>\n        </main>\n        <div className=\"App-option\">\n          <label htmlFor=\"size\">size: </label>\n          <select\n            name=\"size\"\n            value={sizeIndex}\n            onChange={this.onSizeChange.bind(this)}\n          >\n            {SIZE_LIST.map((size, index) => {\n              return (\n                <option value={index} key={index}>\n                  {size.width}*{size.height} ({size.ratio})\n                </option>\n              )\n            })}\n          </select>\n          <label htmlFor=\"mode\">mode: </label>\n          <select\n            name=\"mode\"\n            value={modeIndex}\n            onChange={this.onModeChange.bind(this)}\n          >\n            {MODE_LIST.map((mode, index) => {\n              return (\n                <option value={index} key={index}>\n                  {mode.value}\n                </option>\n              )\n            })}\n          </select>\n          <div>{MODE_LIST[modeIndex].text}</div>\n        </div>\n      </div>\n    )\n  }\n  componentDidUpdate() {\n    this.onResize()\n  }\n  componentDidMount() {\n    this.onResize()\n    let timer = null\n    window.addEventListener('resize', () => {\n      clearTimeout(timer)\n      timer = setTimeout(() => {\n        this.onResize()\n      }, 100)\n    })\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}